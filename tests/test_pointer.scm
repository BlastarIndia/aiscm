(use-modules (oop goops)
             (aiscm element)
             (aiscm pointer)
             (aiscm malloc)
             (aiscm bool)
             (aiscm int)
             (ice-9 regex)
             (guile-tap))
(planned-tests 16)
(define m1 (make-malloc 10))
(define m2 (make-malloc 4))
(write-bytes m1 #vu8(1 2 3 4 5 6 7 8 9 10))
(write-bytes m2 #vu8(0 0 0 0))
(todo '((ok (equal? (make-pointer <bool> m1) (make-pointer <bool> m1))
          "equal pointers")) "not working")
(skip #t
      '((ok (not (equal? (make-pointer <bool> m1) (make-pointer <bool> m2)))
          "unequal pointers")
        (ok (not (equal? (make-pointer <bool> m1) (make-pointer <byte> m1)))
          "unequal pointers (different type)"))
      "meaningless at the moment")
(ok (equal? (make-bool #t) (fetch (make-pointer <bool> m1)))
  "fetch boolean from memory")
(ok (equal? (make-byte 1) (fetch (make-pointer <byte> m1)))
  "fetch byte from memory")
(ok (equal? (make-sint #x0201) (fetch (make-pointer <sint> m1)))
  "fetch short integer from memory")
(ok (equal? (make-byte 123) (store (make-pointer <byte> m2) (make-byte 123)))
  "store function returns value")
(ok (equal? (make-sint 123) (store (make-pointer <sint> m2) (make-byte 123)))
  "store function converts value to type of target")
(ok (equal? (make-usint #x0201) (let ((p (make-pointer <usint> m2)))
                                  (store p (make-usint #x0201))
                                  (fetch p)))
  "storing and fetching back unsigned short int")
(ok (equal? (+ m2 2) (get-value (+ (make-pointer <sint> m2) 1)))
  "pointer operations are aware of size of element")
(ok (equal? (make-sint #x0403) (fetch (lookup (make-pointer <sint> m1) 1 1)))
  "lookup second element with stride 1")
(ok (equal? (make-sint #x0605) (fetch (lookup (make-pointer <sint> m1) 2 1)))
  "lookup third element with stride 1")
(ok (equal? (make-sint #x0605) (fetch (lookup (make-pointer <sint> m1) 1 2)))
  "lookup second element with stride 2")
(ok (equal? (make-sint #x0a09) (fetch (lookup (make-pointer <sint> m1) 2 2)))
  "lookup third element with stride 2")
(ok (string-match "^#<<pointer<<int<16,signed>>>> #x[0-9a-f]*>$"
  (call-with-output-string (lambda (port) (write (make-pointer <sint> m1) port))))
  "write pointer object")
(ok (string-match "^#<<pointer<<int<16,signed>>>> #x[0-9a-f]*>$"
  (call-with-output-string (lambda (port) (display (make-pointer <sint> m1) port))))
  "display pointer object")
(format #t "~&")
