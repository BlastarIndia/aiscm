(use-modules (aiscm malloc)
             (oop goops)
             (unit-test))
(define m (make-malloc 10))
(define-class <test-malloc> (<test-case>))
(define-method (test-make-malloc-equal-pointers (self <test-malloc>))
  (assert-equal (get-memory m) (slot-ref m 'base)))
(define-method (test-make-malloc-stores-size (self <test-malloc>))
  (assert-equal 10 (get-size m)))
(define-method (test-malloc-plus-reduces-size (self <test-malloc>))
  (assert-equal 4 (get-size (plus m 6))))
(define-method (test-malloc-plus-check-offset-gt-zero (self <test-malloc>))
  (assert-exception (plus m -1)))
(define-method (test-malloc-plus-check-offset-lt-size (self <test-malloc>))
  (assert-exception (plus m 11)))
(define-method (test-malloc-read-write (self <test-malloc>))
  (begin
    (write m #vu8(2 3 5 7))
    (assert-equal #vu8(2 3 5) (read m 3))))
(define-method (test-malloc-read-write-with-offset (self <test-malloc>))
  (begin
    (write m #vu8(2 3 5 7))
    (assert-equal #vu8(3 5 7) (read (plus m 1) 3))))
(define-method (test-malloc-read-write-overlap (self <test-malloc>))
  (begin
    (write m #vu8(1 1 1 1))
    (write m #vu8(2 2))
    (assert-equal #vu8(2 2 1 1) (read m 4))))
(define-method (test-malloc-read-overrun (self <test-malloc>))
  (assert-exception (read m 11)))
(define-method (test-malloc-write-overrun (self <test-malloc>))
  (assert-exception (malloc-write m #vu8(1 2 3 4 5 6 7 8 9 10 11))))
(exit-with-summary (run-all-defined-test-cases))
