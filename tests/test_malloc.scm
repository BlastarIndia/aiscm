(use-modules (aiscm malloc)
             (oop goops)
             (guile-tap))
(define m (make-malloc 10))
(planned-tests 6)
(ok (equal? (get-memory m) (slot-ref m 'base))
  "base pointer protects allocated memory from garbage collector")
(ok (equal? 10 (get-size m))
  "'get-size' returns size of allocated memory")
(ok (equal? 4 (get-size (+ m 6)))
  "pointer operations keep track of memory size")
;(define-method (test-malloc-plus-check-offset-gt-zero (self <test-malloc>))
;  (assert-exception (+ m -1)))
;(define-method (test-malloc-plus-check-offset-lt-size (self <test-malloc>))
;  (assert-exception (+ m 11)))
(ok (equal? #vu8(2 3 5)
            (begin (write-bytes m #vu8(2 3 5 7)) (read-bytes m 3)))
  "writing and reading to/from memory")
(ok (equal? #vu8(3 5 7)
            (begin (write-bytes m #vu8(2 3 5 7)) (read-bytes (+ m 1) 3)))
  "writing and reading with offset to/from memory")
(ok (equal? #vu8(2 2 1 1)
            (begin (write-bytes m #vu8(1 1 1 1)) (write-bytes m #vu8(2 2))
                   (read-bytes m 4)))
  "writing with overlap and reading back")
(format #t "~&")
;(define-method (test-malloc-read-overrun (self <test-malloc>))
;  (assert-exception (read-bytes m 11)))
;(define-method (test-malloc-write-overrun (self <test-malloc>))
;  (assert-exception (malloc-write m #vu8(1 2 3 4 5 6 7 8 9 10 11))))
