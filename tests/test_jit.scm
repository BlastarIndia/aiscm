(use-modules (oop goops)
             (system foreign)
             (rnrs bytevectors)
             (aiscm jit)
             (aiscm element)
             (aiscm mem)
             (aiscm int)
             (aiscm pointer)
             (guile-tap))
(planned-tests 74)
(define i1 (random (ash 1 30)))
(define l1 (random (ash 1 60)))
(define ctx (make <jit-context>))
(define mem  (make <mem> #:size 16))
(define ptr  (make (pointer <int>) #:value mem))
(store ptr (make <int> #:value 42))
(store (+ ptr 1) (make <int> #:value 13))
(ok (equal? '(#xb8 #x2a #x00 #x00 #x00) (MOV EAX 42))
    "MOV EAX, 42")
(ok (equal? '(#xb9 #x2a #x00 #x00 #x00) (MOV ECX 42))
    "MOV ECX, 42")
(ok (equal? '(#x41 #xb9 #x2a #x00 #x00 #x00) (MOV R9W 42))
    "MOV R9W, 42")
(ok (equal? '(#x48 #xbe #x2a #x00 #x00 #x00 #x00 #x00 #x00 #x00)
            (MOV RSI 42))
    "MOV RSI, 42")
(ok (equal? '(#x49 #xb9 #x2a #x00 #x00 #x00 #x00 #x00 #x00 #x00)
            (MOV R9D 42))
    "MOV R9D, 42")
(ok (equal? '(#x89 #xc3) (MOV EBX EAX))
    "MOV EBX, EAX")
(ok (equal? '(#x89 #xd1) (MOV ECX EDX))
    "MOV ECX, EDX")
(ok (equal? '(#x45 #x89 #xc8) (MOV R8W R9W))
    "MOV R8W, R9W")
(ok (equal? '(#x8b #x0a) (MOV ECX *RDX))
    "MOV ECX, *RDX")
(ok (equal? '(#x41 #x8b #x0b) (MOV ECX *R11D))
    "MOV ECX, *R11D")
(ok (equal? '(#x8b #x4a #x04) (MOV ECX *RDX 4))
    "MOV ECX, *RDX, 4")
(ok (equal? '(#x8b #x4c #x24 #x04) (MOV ECX *RSP 4))
    "MOV ECX, *RSP, 4")
(ok (equal? '(#x45 #x8b #x53 #x04) (MOV R10W *R11D 4))
    "MOV R10W, *R11D, 4")
(ok (equal? '(#x89 #x11) (MOV *RCX EDX))
    "MOV *RCX, EDX")
(ok (equal? '(#x44 #x89 #x01) (MOV *RCX R8W))
    "MOV *RCX R8W")
(ok (equal? '(#xc3) (RET))
    "RET # near return")
(ok (begin ((asm ctx void (list (RET)))) #t)
    "Empty function")
(ok (eqv? i1 ((asm ctx int (list (MOV EAX i1) (RET)))))
    "Return constant in EAX")
(ok (eqv? (ash 42 32) ((asm ctx long (list (MOV RAX (ash 42 32)) (RET)))))
    "Return constant in RAX")
(ok (eqv? i1 ((asm ctx int (list (MOV ECX i1) (MOV EAX ECX) (RET)))))
    "Function copying content from ECX")
(ok (eqv? i1 ((asm ctx int (list (MOV R14W i1) (MOV EAX R14W) (RET)))))
    "Function copying content from R14W")
(ok (eqv? (ash 42 32) ((asm ctx long
                            (list (MOV R14D (ash 42 32))
                                  (MOV RAX R14D)
                                  (RET)))))
    "Function copying content from R14D")
(ok (equal? '(#xd1 #xe5) (SHL EBP))
    "SHL EBP, 1")
(ok (equal? '(#xd1 #xe5) (SAL EBP))
    "SAL EBP, 1")
(ok (eqv? (ash i1 1) ((asm ctx int (list (MOV EAX i1) (SHL EAX) (RET)))))
    "Shift EAX left by 1")
(ok (eqv? (ash i1 1) ((asm ctx int (list (MOV R9W i1)
                                         (SHL R9W)
                                         (MOV EAX R9W)
                                         (RET)))))
    "Shift R9W left by 1")
(ok (eqv? (ash l1 1) ((asm ctx long (list (MOV RAX l1) (SHL RAX) (RET)))))
    "Function shifting 64-bit number left by 1")
(ok (equal? '(#x48 #xd1 #xe5) (SHL RBP))
    "SHL RBP, 1")
(ok (equal? '(#x48 #xd1 #xe5) (SAL RBP))
    "SAL RBP, 1")
(ok (equal? '(#xd1 #xed) (SHR EBP))
    "SHR EBP, 1")
(ok (equal? '(#xd1 #xfd) (SAR EBP))
    "SAR EBP, 1")
(ok (eqv? (ash i1 -1) ((asm ctx int (list (MOV EAX i1) (SHR EAX) (RET)))))
    "Function shifting right by 1")
(ok (eqv? -21 ((asm ctx int (list (MOV EAX -42) (SAR EAX) (RET)))))
    "Function shifting negative number right by 1")
(ok (equal? '(#x48 #xd1 #xed) (SHR RBP))
    "SHR RBP, 1")
(ok (equal? '(#x48 #xd1 #xfd) (SAR RBP))
    "SAR RBP, 1")
(ok (eqv? (ash l1 -1) ((asm ctx long (list (MOV RAX l1) (SHR RAX) (RET)))))
    "Function shifting 64-bit number right by 1")
(ok (eqv? (ash -1 30) ((asm ctx long
                            (list (MOV RAX (ash -1 32))
                                  (SAR RAX)
                                  (SAR RAX)
                                  (RET)))))
    "Function shifting signed 64-bit number right by 2")
(ok (equal? '(#x05 #x0d #x00 #x00 #x00) (ADD EAX 13))
    "ADD EAX, 13")
(ok (equal? '(#x48 #x05 #x0d #x00 #x00 #x00) (ADD RAX 13))
    "ADD RAX, 13")
(ok (equal? '(#x41 #x81 #xc2 #x0d #x00 #x00 #x00) (ADD R10W 13))
    "ADD R10W, 13")
(ok (equal? '(#x49 #x81 #xc2 #x0d #x00 #x00 #x00) (ADD R10D 13))
    "ADD R10D, 13")
(ok (equal? '(#x01 #xd1) (ADD ECX EDX))
    "ADD ECX, EDX")
(ok (equal? '(#x45 #x01 #xfe) (ADD R14W R15W))
    "ADD R14W, R15W")
(ok (eqv? 55 ((asm ctx int (list (MOV EAX 42) (ADD EAX 13) (RET)))))
    "Function using EAX to add 42 and 13")
(ok (eqv? 55 ((asm ctx long (list (MOV RAX 42) (ADD RAX 13) (RET)))))
    "Function using RAX to add 42 and 13")
(ok (eqv? 55 ((asm ctx int
                   (list (MOV EDX 42)
                         (ADD EDX 13)
                         (MOV EAX EDX)
                         (RET)))))
    "Function using EDX to add 42 and 13")
(ok (eqv? 55 ((asm ctx int
                   (list (MOV R10W 42)
                         (ADD R10W 13)
                         (MOV EAX R10W)
                         (RET)))))
    "Function using R10W to add 42 and 13")
(ok (eqv? 55 ((asm ctx long
                   (list (MOV R10D 42)
                         (ADD R10D 13)
                         (MOV RAX R10D)
                         (RET)))))
    "Function using R10D to add 42 and 13")
(ok (eqv? 55 ((asm ctx int
                   (list (MOV EAX 42)
                         (MOV ECX 13)
                         (ADD EAX ECX)
                         (RET)))))
    "Function using EAX and ECX to add 42 and 13")
(ok (eqv? 55 ((asm ctx int
                   (list (MOV R14W 42)
                         (MOV R15W 13)
                         (ADD R14W R15W)
                         (MOV EAX R14W)
                         (RET)))))
    "Function using R14W and R15W to add 42 and 13")
(ok (equal? '(#x90) (NOP))
    "NOP # no operation")
(ok (eqv? i1 ((asm ctx int (list (MOV EAX i1) (NOP) (NOP) (RET)))))
    "Function with some NOP statements inside")
(ok (equal? '(#x52) (PUSH RDX))
    "PUSH RDX")
(ok (equal? '(#x57) (PUSH RDI))
    "PUSH RDI")
(ok (equal? '(#x5a) (POP RDX))
    "POP RDX")
(ok (equal? '(#x5f) (POP RDI))
    "POP RDI")
(ok (eqv? l1 ((asm ctx long (list (MOV RDX l1) (PUSH RDX) (POP RAX) (RET)))))
    "Function using PUSH and POP")
(ok (eqv? 42 ((asm ctx int (list (MOV RCX mem) (MOV EAX *RCX) (RET)))))
    "Function loading integer from address in RCX")
(ok (eqv? 42 ((asm ctx int (list (MOV R10D mem) (MOV EAX *R10D) (RET)))))
    "Function loading integer from address in R10D")
(ok (eqv? 42 ((asm ctx int (list (MOV RCX mem) (MOV EAX *RCX) (RET)))))
    "Function loading value from address given as pointer")
(ok (eqv? 13 ((asm ctx int (list (MOV RCX mem) (MOV EAX *RCX 4) (RET)))))
    "Load value from address in RCX with offset")
(ok (eqv? 13 ((asm ctx int (list (MOV R9D mem) (MOV EAX *R9D 4) (RET)))))
    "Load value from address in R9W with offset")
(ok (equal? '(#xe9 #x2a #x00 #x00 #x00) (JMP 42))
    "JMP 42")
(ok (eqv? i1 ((asm ctx int
                   (list (MOV ECX i1)
                         (JMP (length (MOV ECX 0)))
                         (MOV ECX 0)
                         (MOV EAX ECX)
                         (RET)))))
    "Function with a local jump")
(ok (eqv? i1 (begin ((asm ctx int
                          (list (MOV RSI (+ mem 8))
                                (MOV ECX i1)
                                (MOV *RSI ECX)
                                (RET))))
                    (get-value (fetch (+ ptr 2)))))
    "Function writing value of ECX to memory")
(ok (eqv? i1 (begin ((asm ctx int
                          (list (MOV RSI (+ mem 12))
                                (MOV R8W i1)
                                (MOV *RSI R8W)
                                (RET))))
                    (get-value (fetch (+ ptr 3)))))
    "Function writing value of R8W to memory")
(ok (eqv? 2 ((asm ctx int (list (MOV EAX EDI) (RET))
                  int int int int) 2 3 5 7))
    "Function return first integer argument")
(ok (eqv? 3 ((asm ctx int (list (MOV EAX ESI) (RET))
                  int int int int) 2 3 5 7))
    "Function return second integer argument")
(ok (eqv? 5 ((asm ctx int (list (MOV EAX EDX) (RET))
                  int int int int) 2 3 5 7))
    "Function return third integer argument")
(ok (eqv? 7 ((asm ctx int (list (MOV EAX ECX) (RET))
                  int int int int) 2 3 5 7))
    "Function return fourth integer argument")
(ok (eqv? 11 ((asm ctx int (list (MOV EAX R8W) (RET))
                   int int int int int int) 2 3 5 7 11 13))
    "Function return fifth integer argument")
(ok (eqv? 13 ((asm ctx int (list (MOV EAX R9W) (RET))
                   int int int int int int) 2 3 5 7 11 13))
    "Function return sixth integer argument")
(ok (eqv? 17 ((asm ctx int (list (MOV EAX *RSP #x8) (RET))
                   int int int int int int int int) 2 3 5 7 11 13 17 19))
    "Function return seventh integer argument")
(ok (eqv? 19 ((asm ctx int (list (MOV EAX *RSP #x10) (RET))
                   int int int int int int int int) 2 3 5 7 11 13 17 19))
    "Function return eighth integer argument")
(format #t "~&")
