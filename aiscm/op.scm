(define-module (aiscm op)
  #:use-module (oop goops)
  #:use-module (system foreign)
  #:use-module (aiscm element)
  #:use-module (aiscm int)
  #:use-module (aiscm jit)
  #:export (minus
            plus))
(define ctx (make <jit-context>))
(define-method (minus (x <element>))
  (let* ((type (foreign-type (class-of x)))
         (ax   (if (eqv? (bits (class-of x)) 64) RAX EAX))
         (di   (if (eqv? (bits (class-of x)) 64) RDI EDI))
         (code (asm ctx type (list (MOV ax di) (NEG ax) (RET)) type))
         (proc (lambda (x) (make (class-of x) #:value (code (get-value x))))))
    (add-method! minus (make <method>
                             #:specializers (list (class-of x))
                             #:procedure proc))
    (minus x)))
(define-method (plus (a <element>) (b <element>))
  (make (coerce (class-of a) (class-of b)) #:value (+ (get-value a) (get-value b))))
