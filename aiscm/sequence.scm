(define-module (aiscm sequence)
  #:use-module (aiscm element)
  #:use-module (aiscm malloc)
  #:use-module (aiscm pointer)
  #:use-module (aiscm lookup)
  #:use-module (aiscm lambda)
  #:use-module (aiscm var)
  #:use-module (oop goops)
  #:export (make-sequence
            sequence->list))
(define (make-sequence type size)
  (let* ((mem (make-malloc (* (storage-size type) size)))
         (ptr (make-pointer type mem))
         (var (make-var))
         (lookup (make-lookup ptr var 1)))
    (make-lambda var lookup size)))
(define (sequence->list seq)
  (letrec ((n (get-length seq))
           (l (lambda (i n)
                (if (< i n)
                  (cons (get seq i) (l (+ i 1) n))
                  '()))))
    (l 0 n)))
